name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  JAVA_VERSION: "21"
  DISTRIBUTION: "temurin"
  DOCKER_IMAGE: "ndf"
  DOCKER_CONTAINER: "ndf-app"
  APP_PORT: 8080

jobs:
  build:
    name: Build & Test Java App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: ${{ env.DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn -B clean package -DskipTests

      - name: Run Tests
        run: mvn -B test

      - name: Upload Application Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/ndf-0.0.1-SNAPSHOT.jar
          retention-days: 5

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: ./target

      # Copy all necessary files to the server so that the Docker build can use the entire context
      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          # Copy the Dockerfile, Maven configuration, source code, and docker-compose file
          source: "./Dockerfile,./pom.xml,./mvnw,./.mvn,./src,./docker-compose.yml"
          target: "~/apps/ndf-backend"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script_stop: true
          envs: DOCKER_IMAGE,DOCKER_CONTAINER,APP_PORT
          script: |
            echo "Starting deployment at $(date)"
            cd ~/apps/ndf-backend

            # Verify required files exist
            if [ ! -f Dockerfile ]; then
              echo "üö® ERROR: Dockerfile is missing!"
              exit 1
            fi

            # Build the Docker image for the app
            echo "Building Docker image..."
            docker build -t ${DOCKER_IMAGE}:latest . || exit 1

            # Create the network if it doesn't exist
            echo "Ensuring app-network exists..."
            docker network create app-network || true

            # Use docker-compose to start all services (both PostgreSQL and the app)
            echo "Starting services using docker-compose..."
            docker compose down
            docker compose up -d --build

            # (Optional) Verify that the app container is running
            echo "Verifying that ${DOCKER_CONTAINER} is running..."
            if ! docker ps | grep -q ${DOCKER_CONTAINER}; then
              echo "üö® ERROR: ${DOCKER_CONTAINER} failed to start"
              exit 1
            fi

            echo "üéâ Deployment completed successfully at $(date)"

      - name: Verify Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            echo "Waiting for application health check..."
            for i in {1..12}; do
              echo "‚è≥ Checking application status... ($i/12)"
              
              # Use explicit curl command and save response to a variable
              RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost:8080/actuator/health)
              HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
              BODY=$(echo "$RESPONSE" | head -n1)
              
              echo "Response body: $BODY"
              echo "HTTP status: $HTTP_STATUS"
              
              if [ "$HTTP_STATUS" = "200" ] && [ "$BODY" = '{"status":"UP"}' ]; then
                echo "‚úÖ Application is healthy!"
                exit 0
              else
                echo "‚ö†Ô∏è Application not healthy yet..."
                echo "Current response: $BODY"
              fi
              
              sleep 5
            done

            echo "üö® ERROR: Application failed to become healthy after 60 seconds"
            echo "Last response: $BODY"
            echo "Last HTTP status: $HTTP_STATUS"
            exit 1
